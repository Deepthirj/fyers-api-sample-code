const request = require('request-promise')
const helper = require('./helper/helper');
const aPI = helper.accessPoint();
const newAPI = helper.newAccessPoint();
class clientApi {
    constructor() {
        this.tokenVariable = null
        this.appId = null
    }
    getToken() {
        return this.tokenVariable
    }
    setToken(token, app_id) {
        this.tokenVariable = token
        this.appId = app_id
    }
    getAppId() {
        return this.appId
    }
    async auth(req) {
        let self = this
        try {
            let req_body = { "app_id": req.app_id, "secret_key": req.secret_key }
            const options = {
                method: 'POST',
                uri: aPI + 'auth',
                body: req_body,
                json: true,
                resolveWithFullResponse: true
            };
            let resp = await request.post(options)
            self.setToken(resp.body.authorization_code, req.app_id)
            const response = resp.body, message = response.message || '', data = helper.removeElements(resp.body);
            return { "code": resp.statusCode, data, message };
        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    generateToken(user_id) {
        let uri
        let token = this.tokenVariable
        let appId = this.appId
        if (user_id != undefined && user_id != null && user_id != "") {
            uri = aPI + 'genrateToken' + '?authorization_code=' + token + '&appId=' + appId + '&user_id=' + user_id
        } else {
            uri = aPI + 'genrateToken' + '?authorization_code=' + token + '&appId=' + appId
        }
        return uri;
    }
    verifyToken(acess_token) {
        let token = this.tokenVariable
        let appId = this.appId
        let api = aPI + 'verify_token?authorization_code=' + token + '&appId=' + appId + '&access_token=' + acess_token
        return api
    }
    async tradebook(req) {
        try {
            const options = { url: aPI + 'tradebook', headers: { "Authorization": req.token }, resolveWithFullResponse: true };
            const resp = await request.get(options);
            const response = JSON.parse(resp.body), message = response.message || '';
            const data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };
        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async  positions(req) {
        try {
            const options = {
                uri: aPI + 'positions',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = JSON.parse(resp.body), message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };
        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async holdings(req) {
        try {
            const options = {
                uri: aPI + 'holdings',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = JSON.parse(resp.body), message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async convertPosition(req) {
        try {
            const options = {
                uri: aPI + 'convertPosition',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                body: req.data,
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.post(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };


        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async funds(req) {
        try {
            const options = {
                uri: aPI + 'funds',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = JSON.parse(resp.body), message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async orders(req) {
        try {
            const options = {
                uri: aPI + 'orders',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                json: true,
                resolveWithFullResponse: true
            };

            const resp = await request.get(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async delete_orders(req) {
        try {
            const options = {
                uri: aPI + 'orders',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                body: req.data,
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.delete(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async place_orders(req) {
        try {
            const options = {
                uri: aPI + 'orders',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                body: req.data,
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.post(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async update_orders(req) {
        try {
            const options = {
                uri: aPI + 'orders',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                body: req.data,
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.put(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }

    }
    async orderId(req) {
        try {
            const encodeGetParams = p =>
                Object.entries(p).map(kv => kv.map(encodeURIComponent).join("=")).join("&");
            const options = {
                uri: aPI + 'order?' + encodeGetParams(req.data),
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async minquantity(req) {
        try {
            const options = {
                uri: aPI + 'minquantity',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = JSON.parse(resp.body), message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async orderStatus(req) {
        try {
            const encodeGetParams = p =>
                Object.entries(p).map(kv => kv.map(encodeURIComponent).join("=")).join("&");
            const options = {
                uri: aPI + 'orderStatus?' + encodeGetParams(req.data),
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async marketStatus(req) {
        try {
            const options = {
                uri: aPI + 'marketStatus',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = JSON.parse(resp.body), message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async level2data(req) {
        try {
            const encodeGetParams = p =>
                Object.entries(p).map(kv => kv.map(encodeURIComponent).join("=")).join("&");
            const options = {
                uri: newAPI + 'level2data?' + encodeGetParams(req.data),
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async symbolsinfo(req) {
        try {
            const encodeGetParams = p =>
                Object.entries(p).map(kv => kv.map(encodeURIComponent).join("=")).join("&");
            const options = {
                uri: newAPI + 'symbolsinfo?' + encodeGetParams(req.data),
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async getQuotes(req) {
        try {
            const encodeGetParams = p =>
                Object.entries(p).map(kv => kv.map(encodeURIComponent).join("=")).join("&");
            const options = {
                uri: newAPI + 'getQuotes?' + encodeGetParams(req.data),
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async getQuickQuote(req) {
        try {
            const encodeGetParams = p =>
                Object.entries(p).map(kv => kv.map(encodeURIComponent).join("=")).join("&");
            const options = {
                uri: newAPI + 'getQuickQuote?' + encodeGetParams(req.data),
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            let str = err.error.message.replace(/\'/gi, '')
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async getHistoricalOHLCV(req) {
        try {
            const encodeGetParams = p =>
                Object.entries(p).map(kv => kv.map(encodeURIComponent).join("=")).join("&");

            const options = {
                uri: newAPI + 'getHistoricalOHLCV?' + encodeGetParams(req.data),
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {
            // console.log(err)
            let str = (err.error.message) ? err.error.message.replace(/\'/gi, '') : ''
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async searchSymbols(req) {
        try {
            const encodeGetParams = p =>
                Object.entries(p).map(kv => kv.map(encodeURIComponent).join("=")).join("&");
            const options = {
                uri: newAPI + 'searchSymbols?' + encodeGetParams(req.data),
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };

        } catch (err) {

            let str = (err.error.message) ? err.error.message.replace(/\'/gi, '') : ''
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
    async get_profile(req) {
        try {
            const options = {
                uri: aPI + 'get_profile',
                headers: {
                    "Authorization": req.token,
                    'Content-Type': 'application/json'
                },
                json: true,
                resolveWithFullResponse: true
            };
            const resp = await request.get(options);
            const response = resp.body, message = response.message || '', data = helper.removeElements(response);
            return { "code": resp.statusCode, data, message };
        } catch (err) {

            let str = (err.error.message) ? err.error.message.replace(/\'/gi, '') : ''
            return { "code": err.statusCode, "data": [], "message": str };
        }
    }
}
module.exports = new clientApi();
